Actuator:
  type: xiaodu_ros  # dilili, reeman, eai, gyroor, sample, or any user-implemented actuator
  serial_dev: /dev/ttyUSB0  # the serial port device of this actuator
  reverse_heading: true
  encoder_ticks_num: 11410  # encoder ticks for a wheel to rotate 360 degs
  axis_diameter: 0.3625 # length of the axis between two wheels
  wheel_diameter: 0.125  # (m)
  ultrasound_flag: 0  # 1 A 2 B 4 C 8 D 16 E 32 F 64 G 128 H
  device_radius: 0.4 # radius of the circumscribed circle of robot
  T_AL:  # calibrate the transition and rotation of {L}idar in {A}ctuator coordinate.
    - [0, 1, 0, 0]
    - [1, 0, 0, 0.2]
    - [0, 0, -1, 0]
    - [0, 0, 0, 1]

Lidar:
  type: none
  serial_dev: /dev/ttyUSB1
  min_valid_scan_dist_for_robot: 0.15
  # "rplidar", "ls01b", "ls01d" have default values, if necessary to override the default values.
  # scan_size: 0  # Radar line number
  # range_min: 0  # maximum range value [m]
  # range_max: 0  # minimum range value [m]
  # scan_time: 0  # time between scans [seconds]
  # time_increment: 0  # time between measurements [seconds]
  # angle_min: 0  # start angle of the scan [rad]
  # angle_max: 0  # end angle of the scan [rad]
  # angle_increment: 0  # angular distance between measurements [rad]

Navigation:
  type: navi  # navi or robot or walk. (robot or walk are path follower based. To-be deprecated)
  use_trajectory_file: false  # use ${navigation_folder}/trajectory.txt to generate trajectory automatically
  use_global_occ_grid_prior: false  # use ${navigation_folder}/semantic_occupancy.png (if exists) as a priori occ grid in OA
  mode: control  # control or loop.
  T_AD:  # calibrate the transition and rotation of {D}evice in {A}ctuator coordinate.
    - [1, 0, 0, 0]
    - [0, 0, 1, 0]
    - [0, -1, 0, 1]
    - [0, 0, 0, 1]
  fuse_wheel_odom_pose: true # use fusion pose (slam & wheel odom) to improve localization
  wheel_odom_vel_feedback: true # use wheel odom velocity feedback to improve PD control
  enable_visual_depth_in_RL: true # use visual depth as a part of RL mode inputs
  force_reloc_distance: 10 # maximum navi distance since last pose update in fusion mode (m)
  force_reloc_angle: 31.41593 # maximum rotation angle since last pose update in fusion mode (rad)
  anchor_min_interval_time: 120 # maximum time since last vision anchor pose (s)
  base_velocity: 0.3 # meter per second.  Only used by simple controller (to-be deprecated)
  lost_recovery_timeout: 15 # timeout threshold in lost recovery status (s)
  enable_obstacle_avoid: true # enable the latest obstacles circumvent strategy
  oa_path_planner: safe_bfs # obstacle avoidance path planner type
  grid_cell_size_x: 200 # local grid size in X dimension
  grid_cell_size_y: 200 # local grid size in Y dimension
  grid_resolution: 0.05 # local grid resolution (m)
  hierarchical_infalte: false # use multiple inflate radius: 1.2, 1.1, 1.0, 0.9 times of device radius
  visual_safe_distance: 0.4  # if the dist between device_radius and visual obstacle is less than the thresh, OA will be triggered (m)
  lidar_safe_distance: 0.3  # if the dist between device_radius and lidar obstacle is less than the thresh, OA will be triggered (m)
  lidar_obstacle_angle_range: 1.5708  # use lidar beams in the angle range to determine if a dangerous obstacle is detected (rad)
  valid_obstacle_dist_range: 2.0 # use obstacles closer than this distance as input of navigation logic (m)
  valid_obstacle_angle_range: 1.309 # use obstacles in this horizontal angle range as input of navigation logic (rad)
  oa_path_update_time_gap: 1.0 # time gap of automatic path search in Obstacle Avoidance (s)
  road_width: 3.0 # the valid width of road for local path search in obstacles circumvent mode (m)
  zone_range: 1.0  # robot is considered belongs to a zone when the distance is less than this thres (m)
  near_force_reloc_place_dist: 0.1  # If the min distance between robot and target places is below this, force reloc. (m)
  control_frequency: 20  # the frequency to update and control actuator (hz)
  update_frequency: 20  # the frequency to update the navigator (hz)

Controller:
  type: PD  # Navigator only supports PD & RL for now
  track_distance: 0.4 # distance between current position and local target.
  target_distance_tolerance: 0.1 # distance error tolerance when reach target (m)
  target_direction_tolerance: 0.087 # direction error tolerance when reach target (rad)
  inter_sample_resolution: 0.01 # sample resolution between two local target candidates
  v_max: 0.6 # 0.4 max linear velocity (m/s)
  abs_w_max: 0.8 # max absolute value of angular velocity (rad/s)
  kp_v: 1.5 # 0.75 P param of linear velocity
  kp_w: 0.8 # 0.51 P param of angular velocity
  kp_acc_v: 0.5 # P param of linear acceleration
  kp_acc_v_stop: 0.25 # P param of linear acceleration in stop motion
  kp_acc_w: 1.0 # P param of angular acceleration
  velocity_multiplier: 1.0  # Multiplier for network velocity output
  angular_multiplier: 1.0  # Multiplier for network angular output
  robot_radius_multiplier: 2.0  # Radius as a multiplier of the original turtlebot radius
